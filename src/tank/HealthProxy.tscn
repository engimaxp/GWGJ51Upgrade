[gd_scene load_steps=10 format=2]

[ext_resource path="res://src/tank/vfx/Explosion.tscn" type="PackedScene" id=1]
[ext_resource path="res://src/tank/CoolDownProxy.tscn" type="PackedScene" id=2]
[ext_resource path="res://src/tank/vfx/HealingEffect.tscn" type="PackedScene" id=3]
[ext_resource path="res://src/tank/HealthProxy.gd" type="Script" id=4]
[ext_resource path="res://asset/font/HarmonyOS_Sans_SC_Black.ttf" type="DynamicFontData" id=5]
[ext_resource path="res://asset/icons/shield.png" type="Texture" id=6]

[sub_resource type="Shader" id=2]
code = "shader_type canvas_item;

uniform vec4 ting_color:hint_color = vec4(1.0);
uniform float range:hint_range(0.0, 1.0) = 0.0;

uniform float shine_strength = 1.0;
uniform bool is_shine = false;
uniform bool is_rainbow = false;
uniform vec2 tileOffset = vec2(0.0,0.0);
uniform vec2 tileSize = vec2(64.0,60.0);

uniform sampler2D random_colors : hint_black;

vec3 colorFromGradient(float n){
	return texture(random_colors,vec2(n,0.)).rgb;
}

float remap(float a,float b,float c,float d,float t){
	return ((t-a) / (b-a)) * (d-c) + c;
}
//void vertex(){
//	vec2 v = VERTEX;
//	v.x += (1.-UV.y)*sin(TIME*1.5)*2.0;
//	VERTEX = v;
//}

vec4 texturePointSmooth(sampler2D tex, vec2 uv) {
	vec2 size = vec2(textureSize(tex, 0));
	vec2 pixel = vec2(1.0) / size;
	uv -= pixel * vec2(0.5);
	vec2 uv_pixels = uv * size;
	vec2 delta_pixel = fract(uv_pixels) - vec2(0.5);
	vec2 ddxy = fwidth(uv_pixels);
	vec2 mip = log2(ddxy) - 0.5;
	return textureLod(tex, uv + (clamp(delta_pixel / ddxy, 0.0, 1.0) - delta_pixel) * pixel, min(mip.x, mip.y));
}

void fragment() {
	vec4 tx = texturePointSmooth(TEXTURE, UV);
	vec4 result = vec4(0.0);
	vec2 totalSize = vec2(1./TEXTURE_PIXEL_SIZE.x,1./TEXTURE_PIXEL_SIZE.y);
	vec2 uv = UV;
	uv -= tileOffset/totalSize;
	uv *= totalSize/tileSize;
	
	uv -= 0.5;
	
	vec2 st = vec2(atan(uv.x,-uv.y),length(uv));
	float a = st.x/(-3.1415926);
	float c = remap(-1.0,1.0,0.0,1.0,a);
	float b = step(range,c);
	float d = 1.0 - b ;//* step(0.5,1. - st.y);
	if(is_rainbow){
		result = mix(tx , vec4(colorFromGradient(sin(TIME) * 0.5 + 0.5),1.0) ,tx.a * d);
	}
	else{
		result = mix(tx , ting_color ,tx.a * d);
	}
	if (is_shine){
		result.rgb = result.rgb * (1. + (0.5 + 0.5 * sin(TIME * 4.0)) * shine_strength);
	}
	COLOR = result;
}
"

[sub_resource type="ShaderMaterial" id=3]
resource_local_to_scene = true
shader = SubResource( 2 )
shader_param/ting_color = Color( 0, 0, 0, 0.760784 )
shader_param/range = 0.0
shader_param/shine_strength = 1.0
shader_param/is_shine = false
shader_param/is_rainbow = false
shader_param/tileOffset = Vector2( 0, 0 )
shader_param/tileSize = Vector2( 128, 128 )

[sub_resource type="DynamicFont" id=1]
resource_local_to_scene = true
size = 48
outline_size = 4
outline_color = Color( 0, 0.25098, 0.419608, 1 )
extra_spacing_char = 4
font_data = ExtResource( 5 )

[node name="HealthProxy" type="Node2D"]
script = ExtResource( 4 )

[node name="HealingEffect" parent="." instance=ExtResource( 3 )]

[node name="Explosion" parent="." instance=ExtResource( 1 )]

[node name="CoolDownProxy" parent="." instance=ExtResource( 2 )]

[node name="Shield" type="Sprite" parent="."]
modulate = Color( 1, 1, 1, 0.768627 )
self_modulate = Color( 0.227451, 0.533333, 0.854902, 1 )
material = SubResource( 3 )
texture = ExtResource( 6 )

[node name="HealthLeft" type="RichTextLabel" parent="Shield"]
margin_left = -50.0
margin_top = -30.0
margin_right = 50.0
margin_bottom = 28.0
rect_min_size = Vector2( 100, 0 )
rect_clip_content = false
size_flags_horizontal = 3
size_flags_vertical = 4
custom_colors/default_color = Color( 1, 1, 1, 1 )
custom_fonts/normal_font = SubResource( 1 )
bbcode_enabled = true
bbcode_text = "[center]20[/center]"
text = "20"
fit_content_height = true
scroll_active = false
