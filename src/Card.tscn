[gd_scene load_steps=15 format=2]

[ext_resource path="res://asset/card.png" type="Texture" id=1]
[ext_resource path="res://asset/cards/acid_ocean.png" type="Texture" id=2]
[ext_resource path="res://asset/light_texture.png" type="Texture" id=3]
[ext_resource path="res://src/Card.gd" type="Script" id=4]
[ext_resource path="res://asset/card_glow.png" type="Texture" id=5]
[ext_resource path="res://src/CardStateMachine.gd" type="Script" id=6]

[sub_resource type="Shader" id=9]
code = "shader_type canvas_item;

uniform sampler2D n;
uniform float intensity = 0.0f;
uniform float speed = 1.0f;

void fragment(){
	vec4 tx = texture(TEXTURE, UV);
	vec4 noise = texture(n, UV - TIME / (1.0 + speed));
	COLOR.a = clamp(tx.r * noise.r * intensity, 0.0, 1.0);
	COLOR.a = pow(COLOR.a, 2);
}"

[sub_resource type="OpenSimplexNoise" id=5]

[sub_resource type="NoiseTexture" id=10]
width = 64
height = 64
seamless = true
noise = SubResource( 5 )

[sub_resource type="ShaderMaterial" id=7]
shader = SubResource( 9 )
shader_param/intensity = 3.0
shader_param/speed = 5.0
shader_param/n = SubResource( 10 )

[sub_resource type="Shader" id=2]
code = "shader_type canvas_item;
uniform float Angle : hint_range(0.,180.) = 0.;
uniform float strech: hint_range(1.,1.5) = 1.2;
uniform float light_strength: hint_range(0.1,1.) = 0.1;
uniform sampler2D Texture_hide;
uniform float shine_strength;
uniform bool is_shine = false;

uniform vec4 tint_color:hint_color = vec4(1.0);
//uniform sampler2D n1;
//uniform sampler2D n2;

void sincos(float a,inout float s,inout float c){
	s = sin(a);
	c = cos(a);
}
void vertex(){
	
	float s ;
	float c ; 
	sincos(radians(Angle),s,c);
	vec2 ps = 1.0/TEXTURE_PIXEL_SIZE;
	vec3 v3 = vec3(VERTEX-ps/2.0,0);
	
	float a;
	if (Angle <= 90.){
		a = 1. + (strech - 1.) * (Angle / 90.);
	}
	else{
		a = strech - (strech - 1.) * ((Angle-90.) / 90.);
	}
	
	mat3 m3 = mat3(vec3(c,0,-s),vec3(0,1,0),vec3(s,0,c));
	mat3 m4 = mat3(vec3(1,0,0),vec3(0,1,0),vec3(0,0,1));
//	mat3 m5 = mat3(vec3(1,0,0),vec3(0,1,0),vec3(0,0,1));
	mat3 m5 = mat3(vec3(1,0,0),vec3(0,a,0),vec3(0,0,1));
//	mat3 m3 = mat3(vec3(c,-s,0),vec3(s,c,0),vec3(0,0,1));
//	mat3 m4 = mat3(vec3(1,0,0),vec3(0,1,0),vec3(0,0,1));
	v3 = m3*m5*m4*v3;
	
	
	VERTEX = v3.xy + ps/2.0;
	
	
}

void fragment(){
	if (Angle > 90.){
		COLOR = texture(Texture_hide, UV);
//		NORMAL = texture(n2, UV).rgb;
		}
	else{
		COLOR = texture(TEXTURE, UV);
		float x = 0.0;
		vec4 tx = texture(TEXTURE,UV);
		if (tx.r > 0.8){
			x = 1.f;
		}
		COLOR.rgb += x * tint_color.rgb * ( 0.5 * sin(TIME) + 0.5) * shine_strength;
//		NORMAL = texture(n1, UV).rgb;
	}
	if (is_shine){
		COLOR.rgb = COLOR.rgb * (1. + (0.5 + 0.5 * sin(TIME)));
	}
}

uniform bool rim_light = false;
uniform float rim_thickness : hint_range(0, 40) = 5.0;
uniform float rim_intense : hint_range(0, 1) = 1.0;
uniform bool rim_extra_thick = false;

void light() {
	if (rim_light) {
		vec2 size = TEXTURE_PIXEL_SIZE * rim_thickness;
		float outline = texture(TEXTURE, UV + vec2(-size.x, 0)).a;
		outline *= texture(TEXTURE, UV + vec2(0, size.y)).a;
		outline *= texture(TEXTURE, UV + vec2(size.x, 0)).a;
		outline *= texture(TEXTURE, UV + vec2(0, -size.y)).a;
		if (rim_extra_thick) {
			outline *= texture(TEXTURE, UV + vec2(-size.x, size.y)).a;
			outline *= texture(TEXTURE, UV + vec2(size.x, size.y)).a;
			outline *= texture(TEXTURE, UV + vec2(-size.x, -size.y)).a;
			outline *= texture(TEXTURE, UV + vec2(size.x, -size.y)).a;
		}
		outline = 1.0 - outline;

		vec4 color = texture(TEXTURE, UV);
		float rim_cap = outline * color.a * rim_intense;
		LIGHT += rim_cap;
	}
}"

[sub_resource type="ShaderMaterial" id=3]
resource_local_to_scene = true
shader = SubResource( 2 )
shader_param/Angle = 180.0
shader_param/strech = 1.2
shader_param/light_strength = 0.1
shader_param/shine_strength = null
shader_param/is_shine = false
shader_param/tint_color = Color( 0.129412, 0.619608, 0.14902, 1 )
shader_param/rim_light = true
shader_param/rim_thickness = 5.0
shader_param/rim_intense = 1.0
shader_param/rim_extra_thick = true
shader_param/Texture_hide = ExtResource( 1 )

[sub_resource type="RectangleShape2D" id=1]
extents = Vector2( 56, 76 )

[sub_resource type="StyleBoxEmpty" id=8]

[node name="Card" type="Node2D"]
script = ExtResource( 4 )

[node name="Glow" type="Sprite" parent="."]
self_modulate = Color( 1, 1, 1, 0 )
material = SubResource( 7 )
scale = Vector2( 0.8, 0.8 )
texture = ExtResource( 5 )

[node name="Card" type="Sprite" parent="."]
light_mask = 4
material = SubResource( 3 )
position = Vector2( -58, 0 )
scale = Vector2( 0.4, 0.4 )
texture = ExtResource( 2 )
offset = Vector2( 145, 0 )

[node name="Light2D" type="Light2D" parent="."]
light_mask = 4
position = Vector2( -1.19209e-07, -37 )
z_index = 11
texture = ExtResource( 3 )
range_item_cull_mask = 4
shadow_item_cull_mask = 4

[node name="CardStateMachine" type="Node2D" parent="."]
script = ExtResource( 6 )

[node name="CollisionDetector" type="Area2D" parent="CardStateMachine"]
collision_mask = 3

[node name="CollisionShape2D" type="CollisionShape2D" parent="CardStateMachine/CollisionDetector"]
shape = SubResource( 1 )

[node name="MouseListener" type="PanelContainer" parent="CardStateMachine"]
margin_left = -58.0
margin_top = -86.0
margin_right = 55.0
margin_bottom = 86.0
custom_styles/panel = SubResource( 8 )

[node name="ReferenceRect" type="ReferenceRect" parent="CardStateMachine/MouseListener"]
visible = false
margin_right = 113.0
margin_bottom = 152.0
mouse_filter = 2
size_flags_horizontal = 3
size_flags_vertical = 3
border_width = 5.0
editor_only = false
